(self.webpackChunksecretstar=self.webpackChunksecretstar||[]).push([[792],{379:(e,t,n)=>{const{SEA_LIST:r,SEA_CREATURES:a,DESCRIPTORS:o,COLORS:i,CREATURE_DESCRIPTORS:s}=n(943),c=e=>e[Math.random()*e.length|0];e.exports.randomNoun=()=>c(r),e.exports.randomDescriptor=e=>a.includes(e)?c(o.concat(s)):c(o),e.exports.format=e=>e[0].toUpperCase()+e.slice(1),e.exports.randomColor=()=>c(i),e.exports.combineUsername=(e,t,n,r)=>(t+n+r).length<=e?t+n+r:(t+r).length<=e?t+r:(n+r).length<=e?n+r:r.slice(0,e)},383:(e,t,n)=>{"use strict";var r=n(555),a=n(203);const o="primary",i="primary";class s extends a.Ay{constructor(){super("secret*"),this.accounts=void 0,this.sessions=void 0,this.identity=void 0,this.picture=void 0,this.channel=void 0,this.signingKeys=void 0,this.webApp=void 0,this.pendingRequests=void 0,this.settings=void 0,this.version(1).stores({accounts:"id",sessions:"id",identity:"id",settings:"id",picture:"filename",channel:"id",webAppKey:"++id, ed25519Key",pendingRequests:"id",signingKeys:"public, private"}),this.on("ready",(async e=>{const t=e;0===await t.settings.count()&&t.settings.add({id:i,seamless:{signup:!1,login:!1}}),0===await t.identity.count()&&t.identity.add({id:o})}))}async getSettings(){const e=await this.settings.get(i);if(!e)throw new Error("What?");return e}async updateSettings(e){return this.settings.update(i,(0,r.A)({},e))}async getIdentity(){const e=await this.identity.get(o);if(!e)throw new Error("Expecting identity to be set!");return e}async savePicture(e){const t=btoa(String.fromCharCode.apply(null,new Uint8Array(await e.arrayBuffer())));return await this.picture.put({filename:e.name,type:e.type,data:t})}findCorrespondingAccounts(e,t,n){return this.accounts.filter((r=>{let{webAppActor:a,metadata:o}=r;return s=a,!(("ed25519Key"in(i=e)?!("ed25519Key"in s)||i.ed25519Key!==s.ed25519Key:"ed25519Key"in s||s.originalUri.hostname!==i.originalUri.hostname)||void 0!==t&&t!==o.category||void 0!==n&&n!==o.version);var i,s}))}pictureToDataUrl(e){return"data:".concat(e.type,";base64,").concat(e.data)}}const c=new s,d="popup";var l,u;const p=null!==(l=browser)&&void 0!==l&&null!==(u=l.runtime)&&void 0!==u&&u.getURL?browser.runtime.getURL("build/index.html")+"#":"http://localhost:3000",w=(e,t)=>e.startsWith("/")?"".concat(p,"/").concat(t).concat(e):"".concat(p,"/").concat(t,"/").concat(e),y=async e=>{const t=await c.sessions.get(e);if(!t)throw new Error("Unable to find session record by id "+e);return t};n(492);let g=function(e){return e.PendingDeclaration="PendingDeclaration",e.Registration="Registration",e.Authentication="Authentication",e}({}),h=function(e){return e[e.UnknownReason=0]="UnknownReason",e[e.GeneralError=1]="GeneralError",e[e.NetworkError=2]="NetworkError",e[e.UserError=3]="UserError",e[e.OperationAborted=4]="OperationAborted",e[e.ChallengeNotSupported=5]="ChallengeNotSupported",e[e.UnexpectedChallengeMessage=6]="UnexpectedChallengeMessage",e[e.InvalidChallengeMessage=7]="InvalidChallengeMessage",e}({}),b=function(e){return e.Pending="Pending",e.Created="Created",e.Retired="Retired",e}({});function f(e){return btoa(function(e){return String.fromCharCode.apply(null,new Uint8Array(e))}(e))}const v={name:"Full name",givenName:"First name",middleName:"Middle name",familyName:"Family name",nickname:"Nickname",gender:"Gender",birthdate:"Birthdate",locale:"Locale",address:"Address",profile:"Profile URL",picture:"Picture",website:"Website URL",zoneinfo:"Zoneinfo"},m=e=>{const t={};return Object.keys(e.parameters).forEach((n=>{const r=e.parameters[n];void 0!==r&&"string"!=typeof r&&"number"!=typeof r&&"boolean"!=typeof r?r instanceof ArrayBuffer?t[n]=f(r):t[n]=f(r.buffer):t[n]=r})),JSON.stringify({ciphertext:f(e.ciphertext),parameters:t})};const E=async(e,t)=>{let{requestId:n,tabId:r}=e;browser.pageAction.show(r);const a=S(n,r),o=function(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return browser.pageAction.setPopup({tabId:e,popup:n?w(t,d):t})}(r,t,!1),i=browser.pageAction.openPopup();await a,await o,await i},A=e=>"tabdict:".concat(e),S=async(e,t)=>{await browser.storage.session.set({[A(e)]:t})};browser.runtime.onMessage.addListener((function(e,t,n){if(console.log("onMessage:",e,t),"secretstar@alichry"!==t.id)return;const r=async()=>{const t=await(async e=>{const t=A(e);return(await browser.storage.session.get(t))[t]})(e.data.requestId);if(t)try{await Promise.resolve(browser.pageAction.hide(t))}catch(e){console.warn("secretstar: error hiding popup:"),console.error(e)}finally{await(async e=>{await browser.storage.session.remove(A(e))})(e.data.requestId)}else console.warn("secretstar: can't hide popup, tabId undefined.")},a=async t=>{try{await("resolve"===t?browser.berytus.resolveRequest(e.data.requestId,e.data.value):browser.berytus.rejectRequest(e.data.requestId,e.data.value)),console.debug("secretstar@alichry: settled request",e.data.requestId)}catch(e){console.warn("secretstar: error resolving request:"),console.error(e)}};return"resolveRequest"===e.type?(r().then((()=>a("resolve"))),void n()):"rejectRequest"===e.type?(r().then((()=>a("reject"))),void n()):void 0})),console.debug("secretstar(bg): loaded");const R=e=>(0,r.A)((0,r.A)({},e),{},{response:void 0});async function q(e,t){}async function C(e,t,n,r){E({requestId:e.request.id,tabId:e.document.id},w(n,d))}browser.berytus.registerRequestHandler({manager:{async getSigningKey(e,t){const n=await c.signingKeys.toArray();if(n.length>0)return void e.response.resolve(n[0].public);const r=await window.crypto.subtle.generateKey("Ed25519",!0,["sign","verify"]),a=f(await window.crypto.subtle.exportKey("spki",r.publicKey));await c.signingKeys.add({public:a,private:await window.crypto.subtle.exportKey("pkcs8",r.privateKey)}),e.response.resolve(a)},async getCredentialsMetadata(e,t){const n=c.findCorrespondingAccounts(t.webAppActor,t.accountConstraints.category,t.accountConstraints.schemaVersion);e.response.resolve(await n.count())}},channel:{async createChannel(e,t){const n=await c.signingKeys.get(t.channel.scmActor.ed25519Key);if(!n)throw new Error("Unable to find signing key "+t.channel.scmActor.ed25519Key);await c.channel.add({id:t.channel.id,scmEd25519:n,webAppEd25519Pub:"ed25519Key"in t.channel.webAppActor?t.channel.webAppActor.ed25519Key:void 0,e2eeActvie:!1}),e.response.resolve()},async generateX25519Key(e){const t=await c.channel.get(e.channel.id);if(!t)throw new Error("Unable to find channel by id "+e.channel.id);if(t.scmX25519)throw new Error("Expecting our scm x25519 key to be unset; got otherwise.");const n=await window.crypto.subtle.generateKey("X25519",!0,["deriveKey"]),r=f(await window.crypto.subtle.exportKey("spki",n.publicKey)),a={scmX25519:{private:await window.crypto.subtle.exportKey("pkcs8",n.privateKey),public:r}};await c.channel.update(t,a),e.response.resolve({public:r})},async verifySignedKeyExchangeParameters(e,t){const n=await c.channel.get(e.channel.id);if(!n)throw new Error("Unable to find channel by id "+e.channel.id);if(!n.scmEd25519)throw new Error("Expecting our scm Ed25519 to be set; got otherwise.");if(!n.scmX25519)throw new Error("Expecting our scm X25519 to be set; got otherwise.");if(n.keyAgreement)throw new Error("Expecting key agreement parameters to be unset; got otherwise.");if(!n.webAppEd25519Pub)throw new Error("Expecting channel to have a crypto web app actor set; got otherwise.");const r=(()=>{const e=JSON.parse(t.canonicalJson);return e.session.fingerprint.salt=new Uint8Array(e.session.fingerprint.salt).buffer,e.session.fingerprint.value=new Uint8Array(e.session.fingerprint.value).buffer,e.derivation.salt=new Uint8Array(e.derivation.salt).buffer,e.derivation.info=new Uint8Array(e.derivation.info).buffer,e})();if(r.authentication.public.scm!==n.scmEd25519.public)throw new Error("Crypto scm actor mismatch");if(r.authentication.public.webApp!==n.webAppEd25519Pub)throw new Error("Crypto web app actor mismatch");if(r.exchange.public.scm!==n.scmX25519.public)throw new Error("Scm X25519 mismatch");const a=await crypto.subtle.importKey("spki",function(e){const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return n.buffer}(r.authentication.public.webApp),"Ed25519",!1,["verify"]),o=(new TextEncoder).encode(t.canonicalJson);if(!await crypto.subtle.verify("Ed25519",a,t.webAppSignature,o))return void e.response.reject(h.GeneralError);const i={keyAgreement:{parameters:r,signatures:{canonicalJson:t.canonicalJson,webAppSignature:t.webAppSignature}}};await c.channel.update(n,i),e.response.resolve()},async signKeyExchangeParameters(e,t){const n=await c.channel.get(e.channel.id);if(!n)throw new Error("Unable to find channel by id "+e.channel.id);if(!n.scmEd25519)throw new Error("Expecting our scm ed25519Key to have been genenrated");if(!n.scmX25519)throw new Error("Expecting our scm scmX25519 to have been genenrated");if(!n.webAppEd25519Pub)throw new Error("Expecting web app ed25519 to have been given previously");if(!n.keyAgreement)throw new Error("Expecting key agreement parameters to be set; got otherwise.");if(n.keyAgreement.signatures.scmSignature)throw new Error("Expecting our scm signature to be unset; got otherwise.");if(n.keyAgreement.signatures.canonicalJson!==t.canonicalJson)throw new Error("Expecting our stored key agreement JSON to match what was provided; got otherwise.");const r=await window.crypto.subtle.importKey("pkcs8",n.scmEd25519.private,"Ed25519",!1,["sign"]),a=await window.crypto.subtle.sign("Ed25519",r,(new TextEncoder).encode(t.canonicalJson));await c.channel.update(n,{"keyAgreement.signatures.scmSignature":a}),e.response.resolve({scmSignature:a})},async enableEndToEndEncryption(e){const t=await c.channel.get(e.channel.id);if(!t)throw new Error("Expecting channel to be created; got otherwise.");if(!function(e){return!!(e.scmEd25519&&e.scmX25519&&e.webAppEd25519Pub&&e.keyAgreement&&e.keyAgreement.signatures.webAppSignature&&e.keyAgreement.signatures.scmSignature)}(t))throw new Error("Expecting channel to be E2E ready; got otherwise.");const n=await crypto.subtle.importKey("spki",Uint8Array.fromBase64(t.keyAgreement.parameters.exchange.public.webApp),"X25519",!1,[]),r=await window.crypto.subtle.importKey("pkcs8",t.scmX25519.private,"X25519",!1,["deriveKey"]),a=await crypto.subtle.deriveKey({name:"X25519",public:n},r,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey(t.keyAgreement.parameters.derivation,a,t.keyAgreement.parameters.generation,!0,["encrypt","decrypt"]),i={e2eeActvie:!0,e2eeKey:await window.crypto.subtle.exportKey("raw",o)};await c.channel.update(t.id,i),e.response.resolve()},closeChannel:function(e){e.response.resolve()}},login:{async approveOperation(e,t){var n,r;let a;const o="intent/".concat(t.operation.id,"/0");E({requestId:e.request.id,tabId:e.document.id},w(o,d)),await c.sessions.add({id:t.operation.id,requests:[e.request],channel:e.channel,operation:t.operation,context:R(e),tabId:void 0,metadata:{version:(null===(n=e.channel.constraints.account)||void 0===n?void 0:n.schemaVersion)||0,status:b.Pending,category:(null===(r=e.channel.constraints.account)||void 0===r?void 0:r.category)||"",changePassUrl:""},version:1}),q(0,t.operation.id)},async closeOperation(e){const t=(()=>{const e=new Uint8Array(16);window.crypto.getRandomValues(e);let t=[];const n=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"];for(let r=0;r<e.length;r++){const a=e[r];t[r%4]=(t[r%4]||"")+n[a%n.length]}return t.join("-")})(),n=e.operation.id,r=y(n);if(e.operation.type===g.Registration){const a="save/".concat(n,"/").concat(t);await C(e,0,a);const o=await r,i={createdAccountId:await c.accounts.add({id:t,date:(new Date).toISOString(),registrationUri:e.document.uri,fields:o.fields||[],webAppActor:e.channel.webAppActor,userAttributes:o.userAttributes||{},metadata:o.metadata}),requests:o.requests.concat(e.request),version:o.version+1,closed:!0};await c.sessions.update(n,i)}else{const t="auth/".concat(n,"/finished");await C(e,0,t);const a=await r,o={requests:a.requests.concat(e.request),version:a.version+1,closed:!0};await c.sessions.update(n,o)}q()},async getRecordMetadata(e){const t=e.operation.id,n=await y(t);if(e.operation.type===g.Registration)return void e.response.resolve(n.metadata);const r=await c.accounts.get(n.selectedAccountId);if(!r)throw new Error("unable to get account record, the account id does not exist.");e.response.resolve(r.metadata)},async updateMetadata(e,t){const n=e.operation.id,a=await y(n),o={metadata:(0,r.A)((0,r.A)({},a.metadata),t.metadata),version:a.version+1};await c.sessions.update(a,o),e.response.resolve()}},accountCreation:{async approveTransitionToAuthOp(e,t){const n=e.operation.id,r=t.newAuthOp.id,a=y(n),o="transition-to-auth-op/".concat(n,"/").concat(r);await C(e,0,o);const i=await a;if(!i.createdAccountId)throw new Error("Expecting createdAccountId to be set when transitioning!");const s=await c.accounts.get(i.createdAccountId);if(!s)throw new Error("Expecting account to be created before transitioning.");await c.sessions.add({id:r,channel:e.channel,operation:t.newAuthOp,requests:[e.request],transitionedFromSessionId:n,context:R(e),tabId:i.tabId,selectedAccountId:i.createdAccountId,metadata:s.metadata,version:1}),q()},async getUserAttributes(e){const t=e.operation.id,n=y(t),r="get-user-attributes/".concat(t,"/1");await C(e,0,r);const a=await n,o={};Object.keys(v).map((e=>{o[e]=!1})),e.operation.requestedUserAttributes.forEach((e=>{let{id:t,required:n}=e;o[t]=n}));const i={requiredUserAttributes:o,requests:a.requests.concat(e.request),version:2};await c.sessions.update(t,i),q()},updateUserAttributes(e,t){throw new Error("Function not implemented.")},async addField(e,t){var n;const r=e.operation.id,a=y(r);if(null===t.field.value){const n="create-field/".concat(r,"/").concat(t.field.id);await C(e,0,n);const o=await a;if(o.createFieldOptions&&o.createFieldOptions.find((e=>e.id===t.field.id)))return void browser.berytus.rejectRequest(e.request.id,h.GeneralError);const i={requests:o.requests.concat(e.request),createFieldOptions:(o.createFieldOptions||[]).concat({id:t.field.id,type:t.field.type,options:t.field.options}),version:o.version+1};return await c.sessions.update(r,i),void q()}const o="put-field/".concat(r,"/").concat(t.field.id);await C(e,0,o);const i=await a;if(null!==(n=i.putFields)&&void 0!==n&&n.find((e=>e.id===t.field.id)))return void browser.berytus.rejectRequest(e.request.id,h.GeneralError);if("Key"===t.field.type||"SecurePassword"===t.field.type)return console.warn("PutField of type Key or SecurePassword are not allowed."),void browser.berytus.rejectRequest(e.request.id,h.GeneralError);const s={requests:i.requests.concat(e.request),putFields:(i.putFields||[]).concat({id:t.field.id,type:t.field.type,options:t.field.options,value:"SharedKey"===t.field.type?(d=t.field.value.privateKey,d instanceof ArrayBuffer?f(d):m(d)):"string"==typeof t.field.value?t.field.value:m(t.field.value)}),version:i.version+1};var d;await c.sessions.update(r,s),q()},async rejectFieldValue(e,t){var n,r,a;const o=e.operation.id,i=y(o),s="create-field/".concat(o,"/").concat(t.fieldId,"/rejected");await C(e,0,s);const d=await i,l=null===(n=d.fields)||void 0===n?void 0:n.find((e=>e.id===t.fieldId)),u=null===(r=d.rejectedFieldValues)||void 0===r?void 0:r.findIndex((e=>e.fieldId===t.fieldId));if(null===(a=d.createFieldOptions)||void 0===a||!a.find((e=>e.id===t.fieldId))||!l)return void browser.berytus.rejectRequest(e.request.id,h.GeneralError);if("object"==typeof t.optionalNewValue&&("publicKey"in t.optionalNewValue||"salt"in t.optionalNewValue))return console.warn("RejectField of type Key or SecurePassword are not allowed."),void browser.berytus.rejectRequest(e.request.id,h.GeneralError);if("object"==typeof t.optionalNewValue&&null!==t.optionalNewValue&&"ciphertext"in t.optionalNewValue)return console.warn("TODO(berytus): handle encrypted values"),void browser.berytus.rejectRequest(e.request.id,h.GeneralError);let p,w,g=!1;do{if(!t.optionalNewValue)break;if("string"==typeof t.optionalNewValue){g=t.optionalNewValue===l.value,w=t.optionalNewValue;break}if(t.optionalNewValue.privateKey instanceof ArrayBuffer){w=f(t.optionalNewValue.privateKey),g=w===l.value;break}console.warn("TODO(berytus): handle encrypted values")}while(0);if(g)throw console.error("BRTTODO: WebApp rejected field value with an new value that equals the rejected one. Genuis."),new Error("Unable to rejectRegistrationField. WebApp rejected the field value with an invalid new value.");if(void 0===u||-1===u)p={requests:d.requests.concat(e.request),rejectedFieldValues:(d.rejectedFieldValues||[]).concat({fieldId:t.fieldId,code:t.reason.code,webAppDictatedValue:w,previousValues:[l.value]}),version:d.version+1};else{if(d.rejectedFieldValues[u].webAppDictatedValue)throw new Error("This field has been rejected and overriden previously!");d.rejectedFieldValues[u].webAppDictatedValue=w,d.rejectedFieldValues[u].previousValues.push(l.value),p={requests:d.requests.concat(e.request),rejectedFieldValues:d.rejectedFieldValues,version:d.version+1}}await c.sessions.update(o,p),q()}},accountAuthentication:{async approveChallengeRequest(e,t){const n=e.operation.id,a=y(n),o=t.challenge.id,i="auth/".concat(n,"/challenge/").concat(o,"/approve");await C(e,0,i);const s=await a,d={challenges:(0,r.A)((0,r.A)({},s.challenges),{},{[o]:(0,r.A)((0,r.A)({},t.challenge),{},{messages:{}})}),requests:s.requests.concat(e.request),version:s.version+1};await c.sessions.update(s,d),q()},async abortChallenge(e,t){const n=e.operation.id,r=y(n),a=t.challenge.id,o="auth/".concat(n,"/challenge/").concat(a,"/aborted");await C(e,0,o);const i=await r;await c.sessions.update(i,{requests:i.requests.concat(e.request),["challenges.".concat(a,".closed")]:!0,["challenges.".concat(a,".abortionReasonCode")]:t.reason}),q()},async closeChallenge(e,t){const n=e.operation.id,r=y(n),a=t.challenge.id,o="auth/".concat(n,"/challenge/").concat(a,"/sealed");await C(e,0,o);const i=await r;await c.sessions.update(i,{requests:i.requests.concat(e.request),["challenges.".concat(a,".closed")]:!0}),q()},async respondToChallengeMessage(e,t){const n=e.operation.id,r=y(n),a=t.challenge.id,o=t.name,i="auth/".concat(n,"/challenge/").concat(a,"/message/").concat(o);await C(e,0,i);const s=await r;let d;if("string"==typeof t.payload)d=t.payload;else if(t.payload instanceof ArrayBuffer)d=f(t.payload);else{if(ArrayBuffer.isView(t.payload))return console.warn("TODO(berytus): Remove ArrayBufferView support"),void e.response.reject(h.GeneralError);if(!Array.isArray(t.payload))return console.warn("TODO(berytus): Support Encrypted Packet"),void e.response.reject(h.GeneralError);d=t.payload}await c.sessions.update(s,{["challenges.".concat(a,".messages.").concat(o)]:{name:o,payload:d},requests:s.requests.concat(e.request),version:s.version+1}),q()}}})},492:(e,t,n)=>{const{SEA_LIST:r,SEA_CREATURES:a,DESCRIPTORS:o,COLORS:i,CREATURE_DESCRIPTORS:s,ADJECTIVE_DESCRIPTORS:c,SEA_OBJECTS:d,SIZE_DESCRIPTORS:l}=n(943),{randomNoun:u,randomDescriptor:p,randomColor:w,format:y,combineUsername:g}=n(379);e.exports={SEA_LIST:r,SEA_CREATURES:a,DESCRIPTORS:o,COLORS:i,CREATURE_DESCRIPTORS:s,ADJECTIVE_DESCRIPTORS:c,SEA_OBJECTS:d,SIZE_DESCRIPTORS:l,generate:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;if(e<=0||"number"!=typeof e)throw new Error("The maxSize argument must be an integer number greater than zero.");let t=u(),n=p(t),r=w();return t=y(t),n=y(n),r=y(r),g(e,n,r,t)}}},943:e=>{const t=e.exports.SEA_CREATURES=Object.freeze(["walrus","seal","fish","shark","clam","coral","whale","crab","lobster","starfish","eel","dolphin","squid","jellyfish","ray","shrimp","mantaRay","angler","snorkler","scubaDiver","urchin","anemone","morel","axolotl"]),n=e.exports.SEA_OBJECTS=Object.freeze(["boat","ship","submarine","yacht","dinghy","raft","kelp","seaweed","anchor"]),r=e.exports.ADJECTIVE_DESCRIPTORS=Object.freeze(["cute","adorable","lovable","happy","sandy","bubbly","friendly","floating","drifting"]),a=e.exports.SIZE_DESCRIPTORS=Object.freeze(["large","big","small","giant","massive","tiny","little"]);e.exports.CREATURE_DESCRIPTORS=Object.freeze(["swimming","sleeping","eating","hiding"]),e.exports.SEA_LIST=Object.freeze(n.concat(t)),e.exports.DESCRIPTORS=Object.freeze(r.concat(a)),e.exports.COLORS=Object.freeze(["blue","blueGreen","darkCyan","electricBlue","greenBlue","lightCyan","lightSeaGreen","seaGreen","turquoise","aqua","aquamarine","teal","cyan","gray","darkBlue","cerulean","azure","lapis","navy"])}},e=>{e(e.s=383)}]);
//# sourceMappingURL=main.js.map