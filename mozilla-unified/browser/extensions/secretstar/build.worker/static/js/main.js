(self.webpackChunksecretstar=self.webpackChunksecretstar||[]).push([[179],{998:(e,t,a)=>{"use strict";var n=a(63),r=a(447);const o="primary",s="primary";class i extends r.ZP{constructor(){super("secret*"),this.accounts=void 0,this.sessions=void 0,this.identity=void 0,this.picture=void 0,this.channel=void 0,this.webApp=void 0,this.pendingRequests=void 0,this.settings=void 0,this.version(1).stores({accounts:"id",sessions:"id",identity:"id",settings:"id",picture:"filename",channel:"id",webAppKey:"++id, ed25519Key",pendingRequests:"id"}),this.on("ready",(async e=>{const t=e;0===await t.settings.count()&&t.settings.add({id:s,seamless:{signup:!1,login:!1}}),0===await t.identity.count()&&t.identity.add({id:o})}))}async getSettings(){const e=await this.settings.get(s);if(!e)throw new Error("What?");return e}async updateSettings(e){return this.settings.update(s,(0,n.Z)({},e))}async getIdentity(){const e=await this.identity.get(o);if(!e)throw new Error("Expecting identity to be set!");return e}async savePicture(e){const t=btoa(String.fromCharCode.apply(null,new Uint8Array(await e.arrayBuffer())));return await this.picture.put({filename:e.name,type:e.type,data:t})}findCorrespondingAccounts(e,t,a){return this.accounts.filter((n=>{let{webAppActor:r,metadata:o}=n;return i=r,!(("ed25519Key"in(s=e)?!("ed25519Key"in i)||s.ed25519Key!==i.ed25519Key:"ed25519Key"in i||i.originalUri.hostname!==s.originalUri.hostname)||void 0!==t&&t!==o.category||void 0!==a&&a!==o.version);var s,i}))}pictureToDataUrl(e){return"data:".concat(e.type,";base64,").concat(e.data)}}const c=new i,d="popup";var l,u;const p=null!==(l=browser)&&void 0!==l&&null!==(u=l.runtime)&&void 0!==u&&u.getURL?browser.runtime.getURL("build/index.html")+"#":"http://localhost:3000",w=(e,t)=>e.startsWith("/")?"".concat(p,"/").concat(t).concat(e):"".concat(p,"/").concat(t,"/").concat(e),y=async e=>{const t=await c.sessions.get(e);if(!t)throw new Error("Unable to find session record by id "+e);return t};a(25);let h=function(e){return e.PendingDeclaration="PendingDeclaration",e.Registration="Registration",e.Authentication="Authentication",e}({}),f=function(e){return e[e.UnknownReason=0]="UnknownReason",e[e.GeneralError=1]="GeneralError",e[e.NetworkError=2]="NetworkError",e[e.UserError=3]="UserError",e[e.OperationAborted=4]="OperationAborted",e[e.ChallengeNotSupported=5]="ChallengeNotSupported",e[e.UnexpectedChallengeMessage=6]="UnexpectedChallengeMessage",e[e.InvalidChallengeMessage=7]="InvalidChallengeMessage",e}({}),g=function(e){return e.Pending="Pending",e.Created="Created",e.Retired="Retired",e}({});function b(e){return btoa(function(e){return String.fromCharCode.apply(null,new Uint8Array(e))}(e))}const v={name:"Full name",givenName:"First name",middleName:"Middle name",familyName:"Family name",nickname:"Nickname",gender:"Gender",birthdate:"Birthdate",locale:"Locale",address:"Address",profile:"Profile URL",picture:"Picture",website:"Website URL",zoneinfo:"Zoneinfo"},m=e=>{const t={};return Object.keys(e.parameters).forEach((a=>{const n=e.parameters[a];void 0!==n&&"string"!=typeof n&&"number"!=typeof n&&"boolean"!=typeof n?n instanceof ArrayBuffer?t[a]=b(n):t[a]=b(n.buffer):t[a]=n})),JSON.stringify({ciphertext:b(e.ciphertext),parameters:t})};const E=async(e,t)=>{let{requestId:a,tabId:n}=e;browser.pageAction.show(n);const r=R(a,n),o=function(e,t){let a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return browser.pageAction.setPopup({tabId:e,popup:a?w(t,d):t})}(n,t,!1),s=browser.pageAction.openPopup();await r,await o,await s},A=e=>"tabdict:".concat(e),R=async(e,t)=>{await browser.storage.session.set({[A(e)]:t})};browser.runtime.onMessage.addListener((function(e,t,a){if(console.log("onMessage:",e,t),"secretstar@alichry"!==t.id)return;const n=async()=>{const t=await(async e=>{const t=A(e);return(await browser.storage.session.get(t))[t]})(e.data.requestId);if(t)try{await Promise.resolve(browser.pageAction.hide(t))}catch(e){console.warn("secretstar: error hiding popup:"),console.error(e)}finally{await(async e=>{await browser.storage.session.remove(A(e))})(e.data.requestId)}else console.warn("secretstar: can't hide popup, tabId undefined.")},r=async t=>{try{await("resolve"===t?browser.berytus.resolveRequest(e.data.requestId,e.data.value):browser.berytus.rejectRequest(e.data.requestId,e.data.value)),console.debug("secretstar@alichry: settled request",e.data.requestId)}catch(e){console.warn("secretstar: error resolving request:"),console.error(e)}};return"resolveRequest"===e.type?(n().then((()=>r("resolve"))),void a()):"rejectRequest"===e.type?(n().then((()=>r("reject"))),void a()):void 0})),console.debug("secretstar(bg): loaded");const S=e=>(0,n.Z)((0,n.Z)({},e),{},{response:void 0});async function q(e,t){}async function C(e,t,a,n){E({requestId:e.request.id,tabId:e.document.id},w(a,d))}browser.berytus.registerRequestHandler({manager:{async getSigningKey(e,t){const a="BRTTODO:SCMEd25519PublicKey";await c.channel.add({id:"BRTTODO:ChannelID"+Math.floor(1e3*Math.random()),webAppEd25519Key:"ed25519Key"in t.webAppActor?t.webAppActor.ed25519Key:void 0,scmEd25519Key:{publicKey:a,privateKey:"BRTTODO:SCMEd25519PrivateKey"}}),e.response.resolve(a)},async getCredentialsMetadata(e,t){const a=c.findCorrespondingAccounts(t.webAppActor,t.accountConstraints.category,t.accountConstraints.schemaVersion);e.response.resolve(await a.count())}},channel:{async generateKeyExchangeParameters(e,t){const a=await c.channel.get(e.channel.id);if(!a)throw new Error("Unable to find channel by id "+e.channel.id);if(!a.scmEd25519Key)throw new Error("Expecting our scm ed25519Key to have been genenrated");if(!a.webAppEd25519Key)throw new Error("Expecting webapp ed25519Key to have been given previously");const r=new Uint8Array(32),o=new Uint8Array(16);window.crypto.getRandomValues(r),window.crypto.getRandomValues(o);const s=await window.crypto.subtle.generateKey({name:"X25519"},!0,["deriveKey"]),i={aesKeyLength:256,hkdfHash:"SHA-256",hkdfSalt:r.buffer,hkdfInfo:o.buffer},d={webAppX25519Key:t.paramsDraft.webAppX25519Key,params:{aesKeyLength:i.aesKeyLength,hkdfHash:i.hkdfHash,hkdfSalt:b(i.hkdfSalt),hkdfInfo:b(i.hkdfInfo)},scmX25519Key:{privateKey:b(await window.crypto.subtle.exportKey("pkcs8",s.privateKey)),publicKey:b(await window.crypto.subtle.exportKey("spki",s.publicKey))}};await c.channel.update(a,d),e.response.resolve((0,n.Z)((0,n.Z)({},i),{},{scmX25519Key:b(await window.crypto.subtle.exportKey("raw",s.publicKey))}))},async enableEndToEndEncryption(e,t){const a="enable-e2e/".concat(e.channel.id,"/").concat(e.request.id,"/").concat(e.request.type);E({requestId:e.request.id,tabId:e.document.id},w(a,d));const n=await c.channel.get(e.channel.id);if(!n)throw new Error("Expecting channel to be created");if(n.webAppSignature)throw new Error("Expecting web app signature to be unset, i.e. not set previously.");const r={webAppSignature:b(t.webAppPacketSignature)};await c.channel.update(n,r)},closeChannel:function(e){e.response.resolve()}},login:{async approveOperation(e,t){var a,n;let r;const o="intent/".concat(t.operation.id,"/0");E({requestId:e.request.id,tabId:e.document.id},w(o,d)),await c.sessions.add({id:t.operation.id,requests:[e.request],channel:e.channel,operation:t.operation,context:S(e),tabId:(r,void 0),metadata:{version:(null===(a=e.channel.constraints.account)||void 0===a?void 0:a.schemaVersion)||0,status:g.Pending,category:(null===(n=e.channel.constraints.account)||void 0===n?void 0:n.category)||"",changePassUrl:""},version:1}),q(0,t.operation.id)},async closeOperation(e){const t=(()=>{const e=new Uint8Array(16);window.crypto.getRandomValues(e);let t=[];const a=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"];for(let n=0;n<e.length;n++){const r=e[n];t[n%4]=(t[n%4]||"")+a[r%a.length]}return t.join("-")})(),a=e.operation.id,n=y(a);if(e.operation.type===h.Registration){const r="save/".concat(a,"/").concat(t);await C(e,0,r);const o=await n,s={createdAccountId:await c.accounts.add({id:t,date:(new Date).toISOString(),registrationUri:e.document.uri,fields:o.fields||[],webAppActor:e.channel.webAppActor,userAttributes:o.userAttributes||{},metadata:o.metadata}),requests:o.requests.concat(e.request),version:o.version+1,closed:!0};await c.sessions.update(a,s)}else{const t="auth/".concat(a,"/finished");await C(e,0,t);const r=await n,o={requests:r.requests.concat(e.request),version:r.version+1,closed:!0};await c.sessions.update(a,o)}q()},async getRecordMetadata(e){const t=e.operation.id,a=await y(t);if(e.operation.type===h.Registration)return void e.response.resolve(a.metadata);const n=await c.accounts.get(a.selectedAccountId);if(!n)throw new Error("unable to get account record, the account id does not exist.");e.response.resolve(n.metadata)},async updateMetadata(e,t){const a=e.operation.id,r=await y(a),o={metadata:(0,n.Z)((0,n.Z)({},r.metadata),t.metadata),version:r.version+1};await c.sessions.update(r,o),e.response.resolve()}},accountCreation:{async approveTransitionToAuthOp(e,t){const a=e.operation.id,n=t.newAuthOp.id,r=y(a),o="transition-to-auth-op/".concat(a,"/").concat(n);await C(e,0,o);const s=await r;if(!s.createdAccountId)throw new Error("Expecting createdAccountId to be set when transitioning!");const i=await c.accounts.get(s.createdAccountId);if(!i)throw new Error("Expecting account to be created before transitioning.");await c.sessions.add({id:n,channel:e.channel,operation:t.newAuthOp,requests:[e.request],transitionedFromSessionId:a,context:S(e),tabId:s.tabId,selectedAccountId:s.createdAccountId,metadata:i.metadata,version:1}),q()},async getUserAttributes(e){const t=e.operation.id,a=y(t),n="get-user-attributes/".concat(t,"/1");await C(e,0,n);const r=await a,o={};Object.keys(v).map((e=>{o[e]=!1})),e.operation.requestedUserAttributes.forEach((e=>{let{id:t,required:a}=e;o[t]=a}));const s={requiredUserAttributes:o,requests:r.requests.concat(e.request),version:2};await c.sessions.update(t,s),q()},updateUserAttributes(e,t){throw new Error("Function not implemented.")},async addField(e,t){var a;const n=e.operation.id,r=y(n);if(null===t.field.value){const a="create-field/".concat(n,"/").concat(t.field.id);await C(e,0,a);const o=await r;if(o.createFieldOptions&&o.createFieldOptions.find((e=>e.id===t.field.id)))return void browser.berytus.rejectRequest(e.request.id,f.GeneralError);const s={requests:o.requests.concat(e.request),createFieldOptions:(o.createFieldOptions||[]).concat({id:t.field.id,type:t.field.type,options:t.field.options}),version:o.version+1};return await c.sessions.update(n,s),void q()}const o="put-field/".concat(n,"/").concat(t.field.id);await C(e,0,o);const s=await r;if(null!==(a=s.putFields)&&void 0!==a&&a.find((e=>e.id===t.field.id)))return void browser.berytus.rejectRequest(e.request.id,f.GeneralError);if("Key"===t.field.type||"SecurePassword"===t.field.type)return console.warn("PutField of type Key or SecurePassword are not allowed."),void browser.berytus.rejectRequest(e.request.id,f.GeneralError);const i={requests:s.requests.concat(e.request),putFields:(s.putFields||[]).concat({id:t.field.id,type:t.field.type,options:t.field.options,value:"SharedKey"===t.field.type?(d=t.field.value.privateKey,d instanceof ArrayBuffer?b(d):m(d)):"string"==typeof t.field.value?t.field.value:m(t.field.value)}),version:s.version+1};var d;await c.sessions.update(n,i),q()},async rejectFieldValue(e,t){var a,n,r;const o=e.operation.id,s=y(o),i="create-field/".concat(o,"/").concat(t.fieldId,"/rejected");await C(e,0,i);const d=await s,l=null===(a=d.fields)||void 0===a?void 0:a.find((e=>e.id===t.fieldId)),u=null===(n=d.rejectedFieldValues)||void 0===n?void 0:n.findIndex((e=>e.fieldId===t.fieldId));if(null===(r=d.createFieldOptions)||void 0===r||!r.find((e=>e.id===t.fieldId))||!l)return void browser.berytus.rejectRequest(e.request.id,f.GeneralError);if("object"==typeof t.optionalNewValue&&("publicKey"in t.optionalNewValue||"salt"in t.optionalNewValue))return console.warn("RejectField of type Key or SecurePassword are not allowed."),void browser.berytus.rejectRequest(e.request.id,f.GeneralError);if("object"==typeof t.optionalNewValue&&null!==t.optionalNewValue&&"ciphertext"in t.optionalNewValue)return console.warn("TODO(berytus): handle encrypted values"),void browser.berytus.rejectRequest(e.request.id,f.GeneralError);let p,w,h=!1;do{if(!t.optionalNewValue)break;if("string"==typeof t.optionalNewValue){h=t.optionalNewValue===l.value,w=t.optionalNewValue;break}if(t.optionalNewValue.privateKey instanceof ArrayBuffer){w=b(t.optionalNewValue.privateKey),h=w===l.value;break}console.warn("TODO(berytus): handle encrypted values")}while(0);if(h)throw console.error("BRTTODO: WebApp rejected field value with an new value that equals the rejected one. Genuis."),new Error("Unable to rejectRegistrationField. WebApp rejected the field value with an invalid new value.");if(void 0===u||-1===u)p={requests:d.requests.concat(e.request),rejectedFieldValues:(d.rejectedFieldValues||[]).concat({fieldId:t.fieldId,code:t.reason.code,webAppDictatedValue:w,previousValues:[l.value]}),version:d.version+1};else{if(d.rejectedFieldValues[u].webAppDictatedValue)throw new Error("This field has been rejected and overriden previously!");d.rejectedFieldValues[u].webAppDictatedValue=w,d.rejectedFieldValues[u].previousValues.push(l.value),p={requests:d.requests.concat(e.request),rejectedFieldValues:d.rejectedFieldValues,version:d.version+1}}await c.sessions.update(o,p),q()}},accountAuthentication:{async approveChallengeRequest(e,t){const a=e.operation.id,r=y(a),o=t.challenge.id,s="auth/".concat(a,"/challenge/").concat(o,"/approve");await C(e,0,s);const i=await r,d={challenges:(0,n.Z)((0,n.Z)({},i.challenges),{},{[o]:(0,n.Z)((0,n.Z)({},t.challenge),{},{messages:{}})}),requests:i.requests.concat(e.request),version:i.version+1};await c.sessions.update(i,d),q()},async abortChallenge(e,t){const a=e.operation.id,n=y(a),r=t.challenge.id,o="auth/".concat(a,"/challenge/").concat(r,"/aborted");await C(e,0,o);const s=await n;await c.sessions.update(s,{requests:s.requests.concat(e.request),["challenges.".concat(r,".closed")]:!0,["challenges.".concat(r,".abortionReasonCode")]:t.reason}),q()},async closeChallenge(e,t){const a=e.operation.id,n=y(a),r=t.challenge.id,o="auth/".concat(a,"/challenge/").concat(r,"/sealed");await C(e,0,o);const s=await n;await c.sessions.update(s,{requests:s.requests.concat(e.request),["challenges.".concat(r,".closed")]:!0}),q()},async respondToChallengeMessage(e,t){const a=e.operation.id,n=y(a),r=t.challenge.id,o=t.name,s="auth/".concat(a,"/challenge/").concat(r,"/message/").concat(o);await C(e,0,s);const i=await n;let d;if("string"==typeof t.payload)d=t.payload;else if(t.payload instanceof ArrayBuffer)d=b(t.payload);else{if(ArrayBuffer.isView(t.payload))return console.warn("TODO(berytus): Remove ArrayBufferView support"),void e.response.reject(f.GeneralError);if(!Array.isArray(t.payload))return console.warn("TODO(berytus): Support Encrypted Packet"),void e.response.reject(f.GeneralError);d=t.payload}await c.sessions.update(i,{["challenges.".concat(r,".messages.").concat(o)]:{name:o,payload:d},requests:i.requests.concat(e.request),version:i.version+1}),q()}}})},76:e=>{const t=e.exports.SEA_CREATURES=Object.freeze(["walrus","seal","fish","shark","clam","coral","whale","crab","lobster","starfish","eel","dolphin","squid","jellyfish","ray","shrimp","mantaRay","angler","snorkler","scubaDiver","urchin","anemone","morel","axolotl"]),a=e.exports.SEA_OBJECTS=Object.freeze(["boat","ship","submarine","yacht","dinghy","raft","kelp","seaweed","anchor"]),n=e.exports.ADJECTIVE_DESCRIPTORS=Object.freeze(["cute","adorable","lovable","happy","sandy","bubbly","friendly","floating","drifting"]),r=e.exports.SIZE_DESCRIPTORS=Object.freeze(["large","big","small","giant","massive","tiny","little"]);e.exports.CREATURE_DESCRIPTORS=Object.freeze(["swimming","sleeping","eating","hiding"]),e.exports.SEA_LIST=Object.freeze(a.concat(t)),e.exports.DESCRIPTORS=Object.freeze(n.concat(r)),e.exports.COLORS=Object.freeze(["blue","blueGreen","darkCyan","electricBlue","greenBlue","lightCyan","lightSeaGreen","seaGreen","turquoise","aqua","aquamarine","teal","cyan","gray","darkBlue","cerulean","azure","lapis","navy"])},25:(e,t,a)=>{const{SEA_LIST:n,SEA_CREATURES:r,DESCRIPTORS:o,COLORS:s,CREATURE_DESCRIPTORS:i,ADJECTIVE_DESCRIPTORS:c,SEA_OBJECTS:d,SIZE_DESCRIPTORS:l}=a(76),{randomNoun:u,randomDescriptor:p,randomColor:w,format:y,combineUsername:h}=a(365);e.exports={SEA_LIST:n,SEA_CREATURES:r,DESCRIPTORS:o,COLORS:s,CREATURE_DESCRIPTORS:i,ADJECTIVE_DESCRIPTORS:c,SEA_OBJECTS:d,SIZE_DESCRIPTORS:l,generate:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;if(e<=0||"number"!=typeof e)throw new Error("The maxSize argument must be an integer number greater than zero.");let t=u(),a=p(t),n=w();return t=y(t),a=y(a),n=y(n),h(e,a,n,t)}}},365:(e,t,a)=>{const{SEA_LIST:n,SEA_CREATURES:r,DESCRIPTORS:o,COLORS:s,CREATURE_DESCRIPTORS:i}=a(76),c=e=>e[Math.random()*e.length|0];e.exports.randomNoun=()=>c(n),e.exports.randomDescriptor=e=>r.includes(e)?c(o.concat(i)):c(o),e.exports.format=e=>e[0].toUpperCase()+e.slice(1),e.exports.randomColor=()=>c(s),e.exports.combineUsername=(e,t,a,n)=>(t+a+n).length<=e?t+a+n:(t+n).length<=e?t+n:(a+n).length<=e?a+n:n.slice(0,e)}},e=>{e(e.s=998)}]);
//# sourceMappingURL=main.js.map