/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * The origin of this IDL file is
 * http://www.w3.org/TR/WebCryptoAPI/
 */

typedef DOMString KeyType;
typedef DOMString KeyUsage;
typedef DOMString NamedCurve;
typedef Uint8Array BigInteger;

/***** Algorithm dictionaries *****/

dictionary Algorithm {
  required DOMString name;
};

[GenerateInit]
dictionary AesCbcParams : Algorithm {
  required BufferSource iv;
};

[GenerateInit]
dictionary AesCtrParams : Algorithm {
  required BufferSource counter;
  required [EnforceRange] octet length;
};

[GenerateInit]
dictionary AesGcmParams : Algorithm {
  required BufferSource iv;
  BufferSource additionalData;
  [EnforceRange] octet tagLength;
};

dictionary HmacImportParams : Algorithm {
  required AlgorithmIdentifier hash;
};

[GenerateInit]
dictionary Pbkdf2Params : Algorithm {
  required BufferSource salt;
  required [EnforceRange] unsigned long iterations;
  required AlgorithmIdentifier hash;
};

[GenerateInit]
dictionary RsaHashedImportParams {
  required AlgorithmIdentifier hash;
};

dictionary AesKeyGenParams : Algorithm {
  required [EnforceRange] unsigned short length;
};

[GenerateInit]
dictionary HmacKeyGenParams : Algorithm {
  required AlgorithmIdentifier hash;
  [EnforceRange] unsigned long length;
};

[GenerateInit]
dictionary RsaHashedKeyGenParams : Algorithm {
  required [EnforceRange] unsigned long modulusLength;
  required BigInteger publicExponent;
  required AlgorithmIdentifier hash;
};

[GenerateInit]
dictionary RsaOaepParams : Algorithm {
  BufferSource label;
};

[GenerateInit]
dictionary RsaPssParams : Algorithm {
  required [EnforceRange] unsigned long saltLength;
};

[GenerateInit]
dictionary EcKeyGenParams : Algorithm {
  required NamedCurve namedCurve;
};

[GenerateInit]
dictionary AesDerivedKeyParams : Algorithm {
  required [EnforceRange] unsigned long length;
};

[GenerateInit]
dictionary HmacDerivedKeyParams : HmacImportParams {
  [EnforceRange] unsigned long length;
};

[GenerateInit]
dictionary EcdhKeyDeriveParams : Algorithm {
  required CryptoKey public;
};

[GenerateInit]
dictionary DhImportKeyParams : Algorithm {
  required BigInteger prime;
  required BigInteger generator;
};

[GenerateInit]
dictionary EcdsaParams : Algorithm {
  required AlgorithmIdentifier hash;
};

[GenerateInit]
dictionary EcKeyImportParams : Algorithm {
  NamedCurve namedCurve;
};

[GenerateInit]
dictionary HkdfParams : Algorithm {
  required AlgorithmIdentifier hash;
  required BufferSource salt;
  required BufferSource info;
};

/***** JWK *****/

dictionary RsaOtherPrimesInfo {
  // The following fields are defined in Section 6.3.2.7 of JSON Web Algorithms
  required DOMString r;
  required DOMString d;
  required DOMString t;
};

[GenerateInitFromJSON, GenerateToJSON]
dictionary JsonWebKey {
  // The following fields are defined in Section 3.1 of JSON Web Key
  required DOMString kty;
  DOMString use;
  sequence<DOMString> key_ops;
  DOMString alg;

  // The following fields are defined in JSON Web Key Parameters Registration
  boolean ext;

  // The following fields are defined in Section 6 of JSON Web Algorithms
  DOMString crv;
  DOMString x;
  DOMString y;
  DOMString d;
  DOMString n;
  DOMString e;
  DOMString p;
  DOMString q;
  DOMString dp;
  DOMString dq;
  DOMString qi;
  sequence<RsaOtherPrimesInfo> oth;
  DOMString k;
};


/***** The Main API *****/

[Serializable,
 SecureContext,
 Exposed=(Window,Worker)]
interface CryptoKey {
  readonly attribute KeyType type;
  readonly attribute boolean extractable;
  [Cached, Constant, Throws] readonly attribute object algorithm;
  [Cached, Constant, Frozen] readonly attribute sequence<KeyUsage> usages;
};

[GenerateConversionToJS]
dictionary CryptoKeyPair {
  required CryptoKey publicKey;
  required CryptoKey privateKey;
};

typedef DOMString KeyFormat;
typedef (object or DOMString) AlgorithmIdentifier;

[Exposed=(Window,Worker),
 SecureContext]
interface SubtleCrypto {
  [NewObject]
  Promise<any> encrypt(AlgorithmIdentifier algorithm,
                       CryptoKey key,
                       BufferSource data);
  [NewObject]
  Promise<any> decrypt(AlgorithmIdentifier algorithm,
                       CryptoKey key,
                       BufferSource data);
  [NewObject]
  Promise<any> sign(AlgorithmIdentifier algorithm,
                     CryptoKey key,
                     BufferSource data);
  [NewObject]
  Promise<any> verify(AlgorithmIdentifier algorithm,
                      CryptoKey key,
                      BufferSource signature,
                      BufferSource data);
  [NewObject]
  Promise<any> digest(AlgorithmIdentifier algorithm,
                      BufferSource data);

  [NewObject]
  Promise<any> generateKey(AlgorithmIdentifier algorithm,
                           boolean extractable,
                           sequence<KeyUsage> keyUsages );
  [NewObject]
  Promise<any> deriveKey(AlgorithmIdentifier algorithm,
                         CryptoKey baseKey,
                         AlgorithmIdentifier derivedKeyType,
                         boolean extractable,
                         sequence<KeyUsage> keyUsages );
  [NewObject]
  Promise<any> deriveBits(AlgorithmIdentifier algorithm,
                          CryptoKey baseKey,
                          optional unsigned long? length = null);

  [NewObject]
  Promise<any> importKey(KeyFormat format,
                         object keyData,
                         AlgorithmIdentifier algorithm,
                         boolean extractable,
                         sequence<KeyUsage> keyUsages );
  [NewObject]
  Promise<any> exportKey(KeyFormat format, CryptoKey key);

  [NewObject]
  Promise<any> wrapKey(KeyFormat format,
                       CryptoKey key,
                       CryptoKey wrappingKey,
                       AlgorithmIdentifier wrapAlgorithm);

  [NewObject]
  Promise<any> unwrapKey(KeyFormat format,
                         BufferSource wrappedKey,
                         CryptoKey unwrappingKey,
                         AlgorithmIdentifier unwrapAlgorithm,
                         AlgorithmIdentifier unwrappedKeyAlgorithm,
                         boolean extractable,
                         sequence<KeyUsage> keyUsages );
};
/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

typedef DOMString BerytusPlaintextStringSource;

typedef BufferSource BerytusPlaintextBufferSource;

typedef (BerytusPlaintextStringSource or BerytusPlaintextBufferSource) BerytusPlaintextSource;

typedef BerytusEncryptedPacket BerytusCiphertextSource;

typedef (BerytusPlaintextSource or BerytusCiphertextSource) BerytusDataSource;

typedef (DOMString or ArrayBuffer or BerytusEncryptedPacket) BerytusDataType;

/**
 * See childs of Algorithm in SubtleCrypto.webidl; see
 * https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#supported_algorithms
 */
typedef AesGcmParams BerytusEncryptionParams;

[GenerateConversionToJS]
dictionary AesGcmParamsJSON : Algorithm {
  required Base64URLString iv;
  Base64URLString additionalData;
  [EnforceRange] octet tagLength;
};

typedef AesGcmParamsJSON BerytusEncryptionParamsJSON;

[GenerateConversionToJS]
dictionary BerytusEncryptedPacketJSON {
    required BerytusEncryptionParamsJSON parameters;
    required Base64URLString ciphertext;
};

[SecureContext, Exposed=(Window)]
interface BerytusEncryptedPacket {
    /**
     * @type {BerytusEncryptionParams}
     */
    [Throws]
    readonly attribute object parameters;

    [SameObject, Throws]
    readonly attribute ArrayBuffer ciphertext;

    [Throws]
    constructor(BerytusEncryptionParams algorithm, BufferSource ciphertext);

    /**
     * Return a serialisable JavaScript object that can be
     * sent over HTTP. Mirrors `this` interface; however,
     * ArrayBuffers are transformed into Base64 strings.
     */
    [Throws]
    BerytusEncryptedPacketJSON toJSON();
};enum BerytusFieldType {
  "Identity",
  "ForeignIdentity",
  "Password",
  "SecurePassword",
  "ConsumablePassword",
  /**
   * The "Key" field is a public/private key pair.
   * The Secret Manager only returns the public key
   * material of the created key. To ensure the private
   * key is not or has not been, by any chance, accessed
   * by the Web Application. The "Key" field value (the private key)
   * cannot be specified by the Web Application during
   * field creation. Therefore, the Secret Manager has to
   * produce a private key during field creation.
   *
   * In addition to the isolation of the private key,
   * the Secret Manager could act as a decryption oracle
   * for the Web Application to leverage, if needed.
   */
  "Key",
  /**
   * The "SharedKey" field is a public/private key pair.
   * It is shared in the sense that both the Web Application
   * and the Secret Manager, at some point, read the
   * private key material of the produced key. This is
   * important in instances where the Web Application
   * must produce the key instead of the the Secret Manager
   * or when the Web Application must hold a copy of the
   * produced private key. This is different than the "Key"
   * field where the Secret Manager must produce the
   * key and isolate the private key.
   *
   * The private key material can be retrieved by the
   * Web Application later on.
   */
  "SharedKey",
  "Custom"
};

/**
 * Possible values:
 *  Identity:IdentityAlreadyExists
 *  ForeignIdentity:IdentityAlreadyExists
 *  Password:IncompatiblePassword
 *  Key:PublicKeyAlreadyExists
 * Or, any string that matches the below RegExp:
 *  /^Other:[A-Za-z][A-Za-z0-9\-_]*$/
 */
typedef DOMString BerytusFieldRejectionReasonCode;

/**
 * Must match the following RegExp: ^[a-zA-Z][a-zA-Z0-9_\-]$
 */
typedef DOMString BerytusFieldId;

typedef (BerytusDataType or BerytusFieldValueDictionary) BerytusFieldValue;

/**
 * Base interface for Berytus Fields. Each child of this
 * interface should define a constructor.
 */
[SecureContext, Exposed=(Window)]
interface BerytusField {

    /**
     * A unique, account structure-specific, identifier for this field.
     */
    readonly attribute BerytusFieldId id;
    readonly attribute BerytusFieldType type;
    readonly attribute object options;
    [Throws]
    readonly attribute BerytusFieldValue? value;

    [Throws]
    object toJSON();
};dictionary BerytusFieldCategoryOptions {
    /**
     * The category id  to group the field under.
     * The category id must be created before hand
     * through createFieldCategory(id, info);
     */
    required DOMString categoryId;

    /**
     * Optional - Field position within the category.
     */
    unsigned short position;
};

dictionary BerytusBaseFieldOptions {
    /**
     * Optional - The field can be grouped alongside
     * other fields in a category. If this is desired,
     * then pass a `category` option to specify
     * the category id, created using
     * Account.createFieldCategory.
     */
    BerytusFieldCategoryOptions category;
};

/* IDENTITY */
[GenerateConversionToJS]
dictionary BerytusIdentityFieldOptions : BerytusBaseFieldOptions {
    /**
     * Is this identifier supposed to be human-readable?
     */
    required boolean            humanReadable;
    /**
     * Is this identifier _discoverable_ by other users?
     */
    required boolean            private;
    required unsigned short     maxLength;
    /**
     * What are the allowed characters for this identifier?
     */
    DOMString                  allowedCharacters;
};

/**
 * Possible values:
 * EmailAddress
 * PhoneNumber
 * /^Other:[A-Za-z][A-Za-z0-9\-_]+$/
 */
typedef ByteString BerytusForeignIdentityKind;

/* FOREIGN IDENTITY borrows `private` from IDENTITY */
[GenerateConversionToJS]
dictionary BerytusForeignIdentityFieldOptions : BerytusBaseFieldOptions {
    /**
     * Is this foreign identifier _discoverable_ by other users?
     */
    required boolean                      private;
    required BerytusForeignIdentityKind   kind;
};

/* PASSWORD */
[GenerateConversionToJS]
dictionary BerytusPasswordFieldOptions : BerytusBaseFieldOptions {
    /**
     * Optional - The password composition policy.
     * Based on Check Apple's password rules:
     * https://github.com/apple/password-manager-resources/blob/main/quirks/password-rules.json
     */
    DOMString passwordRules;
};

/* CONSUMABLE PASSWORD */
[GenerateConversionToJS]
dictionary BerytusConsumablePasswordFieldOptions : BerytusPasswordFieldOptions {
    /**
     * Optional - Consumable password may be distinguishable from
     * other consumable passwords. A web application might request
     * a specific consumable password using its identifier.
     */
    DOMString passwordIdentifier;
};

/* SECURE PASSWORD */
[GenerateConversionToJS]
dictionary BerytusSecurePasswordFieldOptions : BerytusBaseFieldOptions {
    /**
     * This must be the fieldId for the desired the SRP username value.
     * The `username` must be a registered field in the Password Manager.
     * identityFieldId should point to an Identity or ForeignIdentity field.
     */
    required DOMString identityFieldId;
};

/* KEY */
[GenerateConversionToJS]
dictionary BerytusKeyFieldOptions : BerytusBaseFieldOptions {
    /**
     * COSEAlgorithmIdentifier is borrowed from WebAuthentication.webidl
     * See https://www.iana.org/assignments/cose/cose.xhtml#algorithms
     * Note: Obviously, not all algorithms are suitable.
     * The specified algorithm must be suitable for signing (and
     * potentially asymmetric encryption, maybe? might be better
     * to separate signing keys from encryption keys) of data.
     * Otherwise, it SHOULD be rejected. It is an array of
     * COSEAlgorithmIdentifier to allow the specification of
     * a signing algorithm, and an encryption algorithm.
     */
    //required sequence<COSEAlgorithmIdentifier>     alg;
    required COSEAlgorithmIdentifier     alg;
    // ^ TODO(berytus): 2/1/2024 - At the moment, only a single COSEE algorithm can be
    // specified. In the future, this should be changed to a sequence
    // (array) of algorithms, e.g. to specify an encrpytion algorithm
    // and a signing alogirthm at the same time.
};

/* SHARED KEY; i.e. a private key that is stored in the secret manager. */
[GenerateConversionToJS]
dictionary BerytusSharedKeyFieldOptions : BerytusKeyFieldOptions {};

/**
 * Custom field creation options.
 */
[GenerateConversionToJS]
dictionary BerytusCustomFieldOptions : BerytusBaseFieldOptions {
    /**
     * The mime type of this field's data. E.g.
     * text/plain
     * application/json
     */
    required DOMString mimeType;

    /**
     * A human-readable description of this custom field. E.g.,
     * its purpose.
     */
    required DOMString info;

    /**
     * Optional - Custom fields might require additional
     * options that we cannot standardise. The parameters object
     * will be passed to the Secret Manager. it must not contain
     * any sensitive information. This can be retrieved during
     * authentication.
     */
    record<DOMString, (DOMString or long long or boolean or BufferSource)> parameters;
};/**
 * Base interface for special field values that require
 * a dictioanry format to specify more than one values.
 * This is mainly used in the union type of BerytusField.value.
 * If we had specified 'object' instead of 'BerytusFieldValue'
 * an error will be thrown as the parser would have problem
 * distinguishing between ArrayBuffer and 'object'.
 * Any children of `BerytusFieldValue` should have the attribute
 * type `BerytusDataType` or a subset of its union members.
 */
[SecureContext, Exposed=(Window)]
interface BerytusFieldValueDictionary {};[SecureContext, Exposed=(Window)]
interface BerytusForeignIdentityField : BerytusField {
    /* -- readonly attribute BerytusForeignIdentityFieldOptions options; */

    [Throws]
    constructor(
        DOMString id,
        BerytusForeignIdentityFieldOptions options,
        optional (BerytusPlaintextStringSource or BerytusCiphertextSource) desiredValue
    );
};[SecureContext, Exposed=(Window)]
interface BerytusIdentityField : BerytusField {
    /* -- readonly attribute BerytusIdentityFieldOptions options; */

    [Throws]
    constructor(
        DOMString id,
        BerytusIdentityFieldOptions options,
        optional (DOMString or BerytusEncryptedPacket) desiredValue
    );
};/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
[SecureContext, Exposed=(Window)]
interface BerytusKeyAgreementParameters {
    /**
     * Channel/session ID provided by Berytus
     */
    readonly attribute DOMString sessionId;
    readonly attribute DOMString webAppX25519Key;
    readonly attribute DOMString scmX25519Key;
    readonly attribute DOMString hkdfHash;
    readonly attribute ArrayBuffer hkdfSalt;
    readonly attribute ArrayBuffer hkdfInfo;
    /**
     * (in bits)
     */
    readonly attribute unsigned short aesKeyLength;

    /**
     * Convert this object to an ordered-JSON string.
     * This is designed for key agreement parameter signing.
     * toJSON is deterministic. hkdfSalt and hkdfInfo are encoded
     * as base64.
     * The order is as follows:
     * - sessionId
     * - webAppX25519Key
     * - scmX25519Key
     * - hkdfHash;
     * - hkdfSalt
     * - hkdfInfo
     * - aesKeyLength
     *
     * Two space characters are used as indentation.
     */
    [Throws]
    DOMString toJSON();
};[SecureContext, Exposed=(Window)]
interface BerytusKeyFieldValue : BerytusFieldValueDictionary {
    [Throws]
    readonly attribute (ArrayBuffer or BerytusEncryptedPacket) publicKey;
};

[SecureContext, Exposed=(Window)]
interface BerytusKeyField : BerytusField {
    /* -- readonly attribute BerytusKeyFieldOptions options; */
    /* -- readonly attribute BerytusKeyFieldValue value; */

    [Throws]
    constructor(
        DOMString id,
        BerytusKeyFieldOptions options
    );
};[SecureContext, Exposed=(Window)]
interface BerytusPasswordField : BerytusField {
    /* -- readonly attribute BerytusPasswordFieldOptions options; */

    [Throws]
    constructor(
        DOMString id,
        optional BerytusPasswordFieldOptions options = {},
        optional (BerytusPlaintextStringSource or BerytusCiphertextSource) desiredValue
    );
};[SecureContext, Exposed=(Window)]
interface BerytusSecurePasswordFieldValue : BerytusFieldValueDictionary {
    [Throws]
    readonly attribute (ArrayBuffer or BerytusEncryptedPacket) salt;
    [Throws]
    readonly attribute (ArrayBuffer or BerytusEncryptedPacket) verifier;
};

[SecureContext, Exposed=(Window)]
interface BerytusSecurePasswordField : BerytusField {
    /* -- readonly attribute BerytusSecurePasswordFieldOptions options; */
    /* -- readonly attribute BerytusSecurePasswordValue value; */

    [Throws]
    constructor(
        DOMString id,
        BerytusSecurePasswordFieldOptions options
    );
};[SecureContext, Exposed=(Window)]
interface BerytusSharedKeyFieldValue : BerytusFieldValueDictionary {
    [Throws]
    readonly attribute (ArrayBuffer or BerytusEncryptedPacket) privateKey;

    [Throws]
    constructor((BufferSource or BerytusEncryptedPacket) privateKey);
};

[SecureContext, Exposed=(Window)]
interface BerytusSharedKeyField : BerytusField {
    /* -- readonly attribute BerytusSharedKeyFieldOptions options; */

    [Throws]
    constructor(
        DOMString id,
        BerytusSharedKeyFieldOptions options,
        optional BerytusSharedKeyFieldValue desiredPrivateKeyValue
    );
};/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Must match any of the following strings based on the standardised
 * OpenID Claims.
 *  https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
 * Valid keys:
 *  name
 *  givenName
 *  familyName
 *  middleName
 *  nickname
 *  profile
 *  picture
 *  website
 *  email
 *  gender
 *  birthdate
 *  zoneinfo
 *  locale
 *  phoneNumber
 *  address
 * Or any string matching the following RegExp:
 *  /^custom:[a-zA-Z][a-zA-Z0-9_\-]*$/
 */
typedef DOMString BerytusUserAttributeKey;

dictionary BerytusUserAttributeDefinition {
    /**
     * The user attribute key
     */
    required BerytusUserAttributeKey id;
    /**
     * A human-readable description of this attribute
     */
    DOMString info;
    /**
     * The mime type for the contents of this user attribute.
     * Defaults to text/plain. Note, if
     */
    DOMString mimeType;
    /**
     * The user attribute's value.
     */
    required (DOMString or BufferSource or BerytusEncryptedPacket) value;
};

dictionary BerytusUserAttributeJSON {
    required BerytusUserAttributeKey id;
    DOMString info;
    DOMString mimeType;
    /**
     * If not set, no encoding is applied; e.g., string/plaintext
     * One of:
     *  "Base64URLString",
     *  "EncryptedPacketJSON"
     */
    DOMString encodingType;
    required (DOMString /*or Base64URLString*/ or BerytusEncryptedPacketJSON) value;
};

[SecureContext, Exposed=(Window)]
interface BerytusUserAttribute {
    readonly attribute BerytusUserAttributeKey id;
    /**
     * A user attribute can represent readable strings
     * or binary formats such as a PNG. This attribute
     * is used as an indicator for such variations of
     * user attribute mime types.
     */
    readonly attribute DOMString? mimeType;
    /**
     * Optional - A human-readable description is often helpful
     * for the user to understand that this user attribute
     * is and, perhaps, what it is used for.
     */
    readonly attribute DOMString? info;

    /**
     * The user attribute's value.
     */
    [Throws]
    readonly attribute (DOMString or ArrayBuffer or BerytusEncryptedPacket) value;

    [Throws]
    BerytusUserAttributeJSON toJSON();
};