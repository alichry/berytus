/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import { generateIsolatedRequestHandler } from './base-handler.js';
import { writeFile } from 'node:fs/promises';
import { resolve } from 'node:path';
import { generateValidatedHandler } from './validated-handler.js';
import { generatePublicHandler } from './public-handler.js';
import { generateSequentialdHandler } from './sequential-handler.js';
import { generateDomProxy } from './dom-proxy.js';
import { generateWebExtsSchema } from './webext-schema.js';
const run = async () => {
    const {
        classCode: baseRequestHandlerCode,
        typesToImport
    } = generateIsolatedRequestHandler();

    const {
        code: validatedRequestHandlerCode,
        typesToImport: typesToImport2
    } = generateValidatedHandler();
    const sequentialRequestHandlerCode = generateSequentialdHandler();

    const {
        classCode: publicRequestHandlerCode,
        typesToImport: typesToImport3
    } = generatePublicHandler();

    const file = `/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// This file is automatically generated; do not edit.
import type { ${Object.keys({ ...typesToImport, ...typesToImport2, ...typesToImport3 }).join(', ')} } from './types';`
        + baseRequestHandlerCode
        + "\n"
        + validatedRequestHandlerCode
        + "\n"
        + sequentialRequestHandlerCode
        + "\n"
        + publicRequestHandlerCode;

    await writeFile(
        resolve("./src/RequestHandler.sys.mts"),
        file,
        { encoding: 'utf8' }
    );

    const { header, impl } = await generateDomProxy();
    await writeFile(
        resolve("./dom/AgentProxy.h"),
        header,
        { encoding: 'utf8' }
    );
    await writeFile(
        resolve("./dom/AgentProxy.cpp"),
        impl,
        { encoding: 'utf8' }
    );
    await writeFile(
        resolve("../extensions/schemas/berytus.json"),
        JSON.stringify(await generateWebExtsSchema(), null, 2),
        { encoding: "utf8" }
    );
}

run();