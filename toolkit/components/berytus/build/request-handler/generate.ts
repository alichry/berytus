/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import { generateIsolatedRequestHandler } from './base-handler.js';
import { writeFile } from 'node:fs/promises';
import { resolve } from 'node:path';
import { generateValidatedHandler } from './validated-handler.js';
import { generatePublicHandler } from './public-handler.js';

const run = async () => {
    const {
        classCode: baseRequestHandlerCode,
        typesToImport
    } = generateIsolatedRequestHandler();

    const validatedRequestHandlerCode = generateValidatedHandler();

    const {
        classCode: publicRequestHandlerCode,
        typesToImport: typesToImport2
    } = generatePublicHandler();

    const file = `/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// This file is automatically generated; do not edit.
import type { ${Object.keys({ ...typesToImport, ...typesToImport2 }).join(', ')} } from './types';`
        + baseRequestHandlerCode
        + "\n"
        + validatedRequestHandlerCode
        + "\n"
        + publicRequestHandlerCode;

    await writeFile(
        resolve("./src/RequestHandler.mts"),
        file,
        { encoding: 'utf8' }
    );
}

run();