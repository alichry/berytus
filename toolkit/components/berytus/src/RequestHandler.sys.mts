/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// This file is automatically generated; do not edit.
import type { IUnderlyingRequestHandler, ResponseContext, PreliminaryRequestContext, GetSigningKeyArgs, GetCredentialsMetadataArgs, RequestContext, GenerateKeyExchangeParametersArgs, EnableEndToEndEncryptionArgs, ApproveOperationArgs, RequestContextWithOperation, UpdateMetadataArgs, ApproveTransitionToAuthOpArgs, AddFieldArgs, RejectFieldValueArgs, ApproveChallengeRequestArgs, AbortChallengeArgs, CloseChallengeArgs, RespondToChallengeMessageArgs, IPublicRequestHandler, RequestHandler } from './types';
export class IsolatedRequestHandler implements IUnderlyingRequestHandler {
    #impl: IUnderlyingRequestHandler;
    manager: IUnderlyingRequestHandler["manager"];
    channel: IUnderlyingRequestHandler["channel"];
    login: IUnderlyingRequestHandler["login"];
    accountCreation: IUnderlyingRequestHandler["accountCreation"];
    accountAuthentication: IUnderlyingRequestHandler["accountAuthentication"];
    constructor(impl: IUnderlyingRequestHandler) {
        this.#impl = impl;
        const self = this;
        this.manager = {
            async getSigningKey(context: PreliminaryRequestContext & ResponseContext<"manager", "getSigningKey">, args: GetSigningKeyArgs): Promise<void> {
                try {
                    self.preCall("manager", "getSigningKey", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"manager", "getSigningKey"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"manager", "getSigningKey">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("manager", "getSigningKey", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("manager", "getSigningKey", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.manager.getSigningKey({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "manager",
                        "getSigningKey",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async getCredentialsMetadata(context: PreliminaryRequestContext & ResponseContext<"manager", "getCredentialsMetadata">, args: GetCredentialsMetadataArgs): Promise<void> {
                try {
                    self.preCall("manager", "getCredentialsMetadata", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"manager", "getCredentialsMetadata"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"manager", "getCredentialsMetadata">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("manager", "getCredentialsMetadata", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("manager", "getCredentialsMetadata", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.manager.getCredentialsMetadata({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "manager",
                        "getCredentialsMetadata",
                        context.response,
                        e
                    );
                    return;
                }
            },
        };
        this.channel = {
            async generateKeyExchangeParameters(context: RequestContext & ResponseContext<"channel", "generateKeyExchangeParameters">, args: GenerateKeyExchangeParametersArgs): Promise<void> {
                try {
                    self.preCall("channel", "generateKeyExchangeParameters", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"channel", "generateKeyExchangeParameters"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"channel", "generateKeyExchangeParameters">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("channel", "generateKeyExchangeParameters", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("channel", "generateKeyExchangeParameters", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.channel.generateKeyExchangeParameters({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "channel",
                        "generateKeyExchangeParameters",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async enableEndToEndEncryption(context: RequestContext & ResponseContext<"channel", "enableEndToEndEncryption">, args: EnableEndToEndEncryptionArgs): Promise<void> {
                try {
                    self.preCall("channel", "enableEndToEndEncryption", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"channel", "enableEndToEndEncryption"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"channel", "enableEndToEndEncryption">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("channel", "enableEndToEndEncryption", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("channel", "enableEndToEndEncryption", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.channel.enableEndToEndEncryption({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "channel",
                        "enableEndToEndEncryption",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async closeChannel(context: RequestContext & ResponseContext<"channel", "closeChannel">): Promise<void> {
                try {
                    self.preCall("channel", "closeChannel", { context });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"channel", "closeChannel"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"channel", "closeChannel">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("channel", "closeChannel", { context })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("channel", "closeChannel", { context });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.channel.closeChannel({
                        ...context,
                        ...wrappedResponseCtx
                    }, );
                } catch (e) {
                    self.handleUnexpectedException(
                        "channel",
                        "closeChannel",
                        context.response,
                        e
                    );
                    return;
                }
            },
        };
        this.login = {
            async approveOperation(context: RequestContext & ResponseContext<"login", "approveOperation">, args: ApproveOperationArgs): Promise<void> {
                try {
                    self.preCall("login", "approveOperation", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"login", "approveOperation"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"login", "approveOperation">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("login", "approveOperation", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("login", "approveOperation", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.login.approveOperation({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "login",
                        "approveOperation",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async closeOpeation(context: RequestContextWithOperation & ResponseContext<"login", "closeOpeation">): Promise<void> {
                try {
                    self.preCall("login", "closeOpeation", { context });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"login", "closeOpeation"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"login", "closeOpeation">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("login", "closeOpeation", { context })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("login", "closeOpeation", { context });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.login.closeOpeation({
                        ...context,
                        ...wrappedResponseCtx
                    }, );
                } catch (e) {
                    self.handleUnexpectedException(
                        "login",
                        "closeOpeation",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async getRecordMetadata(context: RequestContextWithOperation & ResponseContext<"login", "getRecordMetadata">): Promise<void> {
                try {
                    self.preCall("login", "getRecordMetadata", { context });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"login", "getRecordMetadata"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"login", "getRecordMetadata">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("login", "getRecordMetadata", { context })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("login", "getRecordMetadata", { context });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.login.getRecordMetadata({
                        ...context,
                        ...wrappedResponseCtx
                    }, );
                } catch (e) {
                    self.handleUnexpectedException(
                        "login",
                        "getRecordMetadata",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async updateMetadata(context: RequestContextWithOperation & ResponseContext<"login", "updateMetadata">, args: UpdateMetadataArgs): Promise<void> {
                try {
                    self.preCall("login", "updateMetadata", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"login", "updateMetadata"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"login", "updateMetadata">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("login", "updateMetadata", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("login", "updateMetadata", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.login.updateMetadata({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "login",
                        "updateMetadata",
                        context.response,
                        e
                    );
                    return;
                }
            },
        };
        this.accountCreation = {
            async approveTransitionToAuthOp(context: RequestContextWithOperation & ResponseContext<"accountCreation", "approveTransitionToAuthOp">, args: ApproveTransitionToAuthOpArgs): Promise<void> {
                try {
                    self.preCall("accountCreation", "approveTransitionToAuthOp", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountCreation", "approveTransitionToAuthOp"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountCreation", "approveTransitionToAuthOp">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountCreation", "approveTransitionToAuthOp", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountCreation", "approveTransitionToAuthOp", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountCreation.approveTransitionToAuthOp({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountCreation",
                        "approveTransitionToAuthOp",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async getUserAttributes(context: RequestContextWithOperation & ResponseContext<"accountCreation", "getUserAttributes">): Promise<void> {
                try {
                    self.preCall("accountCreation", "getUserAttributes", { context });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountCreation", "getUserAttributes"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountCreation", "getUserAttributes">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountCreation", "getUserAttributes", { context })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountCreation", "getUserAttributes", { context });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountCreation.getUserAttributes({
                        ...context,
                        ...wrappedResponseCtx
                    }, );
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountCreation",
                        "getUserAttributes",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async addField(context: RequestContextWithOperation & ResponseContext<"accountCreation", "addField">, args: AddFieldArgs): Promise<void> {
                try {
                    self.preCall("accountCreation", "addField", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountCreation", "addField"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountCreation", "addField">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountCreation", "addField", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountCreation", "addField", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountCreation.addField({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountCreation",
                        "addField",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async rejectFieldValue(context: RequestContextWithOperation & ResponseContext<"accountCreation", "rejectFieldValue">, args: RejectFieldValueArgs): Promise<void> {
                try {
                    self.preCall("accountCreation", "rejectFieldValue", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountCreation", "rejectFieldValue"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountCreation", "rejectFieldValue">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountCreation", "rejectFieldValue", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountCreation", "rejectFieldValue", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountCreation.rejectFieldValue({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountCreation",
                        "rejectFieldValue",
                        context.response,
                        e
                    );
                    return;
                }
            },
        };
        this.accountAuthentication = {
            async approveChallengeRequest(context: RequestContextWithOperation & ResponseContext<"accountAuthentication", "approveChallengeRequest">, args: ApproveChallengeRequestArgs): Promise<void> {
                try {
                    self.preCall("accountAuthentication", "approveChallengeRequest", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountAuthentication", "approveChallengeRequest"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountAuthentication", "approveChallengeRequest">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountAuthentication", "approveChallengeRequest", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountAuthentication", "approveChallengeRequest", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountAuthentication.approveChallengeRequest({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountAuthentication",
                        "approveChallengeRequest",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async abortChallenge(context: RequestContextWithOperation & ResponseContext<"accountAuthentication", "abortChallenge">, args: AbortChallengeArgs): Promise<void> {
                try {
                    self.preCall("accountAuthentication", "abortChallenge", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountAuthentication", "abortChallenge"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountAuthentication", "abortChallenge">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountAuthentication", "abortChallenge", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountAuthentication", "abortChallenge", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountAuthentication.abortChallenge({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountAuthentication",
                        "abortChallenge",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async closeChallenge(context: RequestContextWithOperation & ResponseContext<"accountAuthentication", "closeChallenge">, args: CloseChallengeArgs): Promise<void> {
                try {
                    self.preCall("accountAuthentication", "closeChallenge", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountAuthentication", "closeChallenge"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountAuthentication", "closeChallenge">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountAuthentication", "closeChallenge", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountAuthentication", "closeChallenge", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountAuthentication.closeChallenge({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountAuthentication",
                        "closeChallenge",
                        context.response,
                        e
                    );
                    return;
                }
            },
            async respondToChallengeMessage(context: RequestContextWithOperation & ResponseContext<"accountAuthentication", "respondToChallengeMessage">, args: RespondToChallengeMessageArgs): Promise<void> {
                try {
                    self.preCall("accountAuthentication", "respondToChallengeMessage", { context, args });
                } catch (e) {
                    context.response.reject(e);
                    return;
                }
                const wrappedResponseCtx: ResponseContext<"accountAuthentication", "respondToChallengeMessage"> = {
                    response: {
                        resolve(val: Parameters<ResponseContext<"accountAuthentication", "respondToChallengeMessage">["response"]["resolve"]>[0]) {
                            try {
                                self.preResolve("accountAuthentication", "respondToChallengeMessage", { context, args })
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.resolve(val);
                        },
                        reject(val: unknown) {
                            try {
                                self.preReject("accountAuthentication", "respondToChallengeMessage", { context, args });
                            } catch (e) {
                                context.response.reject(e);
                                throw e;
                            }
                            context.response.reject(val);
                        }
                    }
                };
                try {
                    await self.#impl.accountAuthentication.respondToChallengeMessage({
                        ...context,
                        ...wrappedResponseCtx
                    }, args);
                } catch (e) {
                    self.handleUnexpectedException(
                        "accountAuthentication",
                        "respondToChallengeMessage",
                        context.response,
                        e
                    );
                    return;
                }
            },
        };
    }
    protected preCall(group: string, method: string, args: unknown) {}
    protected preResolve(group: string, method: string, value: unknown) {}
    protected preReject(group: string, method: string, value: unknown) {}
    protected handleUnexpectedException<G extends keyof RequestHandler, M extends keyof RequestHandler[G]>(group: G, method: M, response: ResponseContext<G, M>["response"], excp: unknown) {
        // TODO(berytus): Define what would be the
        // accepted values to reject a request with.
        response.reject(new Components.Exception(
            "Error sending request to secret manager. "
            + "The secret manager unexpectedly threw an exception "
            + "instead of using the reject callback.",
            Cr.NS_ERROR_FAILURE
        ));
    }
}
export class ValidatedRequestHandler extends IsolatedRequestHandler {
    constructor(impl: IUnderlyingRequestHandler) {
        // TODO(berytus): ensure impl is conformant
        super(impl);
    }
    protected preCall(group: string, method: string, args: unknown) {
        // TODO(berytus): validate input
    }
    protected preResolve(group: string, method: string, value: unknown) {
        // TODO(berytus): validate output
    }
    protected preReject(group: string, method: string, value: unknown) {
        // TODO(berytus): validate error value
    }
}
export class SequentialRequestHandler extends ValidatedRequestHandler {

    protected busy: boolean = false;

    protected preCall(group: string, method: string, args: unknown) {
        if (this.busy) {
            throw new Components.Exception(
                'Refusing to send request to secret manager, '
                + 'an existing request is still pending. '
                + 'make sure to send one request at a time '
                + 'to the secret manager.',
                Cr.NS_ERROR_FAILURE
            );
        }
        super.preCall(group, method, args);
        this.busy = true;
    }
    protected preResolve(group: string, method: string, value: unknown) {
        this.busy = false;
        super.preResolve(group, method, value);
    }
    protected preReject(group: string, method: string, value: unknown) {
        this.busy = false;
        super.preReject(group, method, value);
    }
    protected handleUnexpectedException<G extends keyof RequestHandler, M extends keyof RequestHandler[G]>(group: G, method: M, response: ResponseContext<G, M>["response"], excp: unknown) {
        this.busy = false;
        super.handleUnexpectedException(group, method, response, excp);
    }
}

function uuid(): string {
    // @ts-ignore: TODO(berytus): add to index.d.ts
    return Services.uuid
        .generateUUID()
        .toString();
}
export class PublicRequestHandler implements IPublicRequestHandler {
    #impl: IUnderlyingRequestHandler;
    manager: IPublicRequestHandler["manager"];
    channel: IPublicRequestHandler["channel"];
    login: IPublicRequestHandler["login"];
    accountCreation: IPublicRequestHandler["accountCreation"];
    accountAuthentication: IPublicRequestHandler["accountAuthentication"];
    constructor(impl: SequentialRequestHandler) {
        if (!(impl instanceof SequentialRequestHandler)) {
            throw new Error(
                'Cannot construct PublicRequestHandler '
                + 'Expecting request handler to be an '
                + 'instance of SequentialRequestHandler; '
                + 'got otherwise.'
            );
        }
        this.#impl = impl;
        const self = this;
        this.manager = {
            getSigningKey(context: Omit<PreliminaryRequestContext, "request">, args: GetSigningKeyArgs): Promise<ReturnType<RequestHandler["manager"]["getSigningKey"]>> {
                return new Promise<ReturnType<RequestHandler["manager"]["getSigningKey"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"manager", "getSigningKey"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["manager"]["getSigningKey"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Manager_GetSigningKey" as const
                        }
                    };
                    self.#impl.manager.getSigningKey({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            getCredentialsMetadata(context: Omit<PreliminaryRequestContext, "request">, args: GetCredentialsMetadataArgs): Promise<ReturnType<RequestHandler["manager"]["getCredentialsMetadata"]>> {
                return new Promise<ReturnType<RequestHandler["manager"]["getCredentialsMetadata"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"manager", "getCredentialsMetadata"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["manager"]["getCredentialsMetadata"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Manager_GetCredentialsMetadata" as const
                        }
                    };
                    self.#impl.manager.getCredentialsMetadata({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
        };
        this.channel = {
            generateKeyExchangeParameters(context: Omit<RequestContext, "request">, args: GenerateKeyExchangeParametersArgs): Promise<ReturnType<RequestHandler["channel"]["generateKeyExchangeParameters"]>> {
                return new Promise<ReturnType<RequestHandler["channel"]["generateKeyExchangeParameters"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"channel", "generateKeyExchangeParameters"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["channel"]["generateKeyExchangeParameters"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Channel_GenerateKeyExchangeParameters" as const
                        }
                    };
                    self.#impl.channel.generateKeyExchangeParameters({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            enableEndToEndEncryption(context: Omit<RequestContext, "request">, args: EnableEndToEndEncryptionArgs): Promise<ReturnType<RequestHandler["channel"]["enableEndToEndEncryption"]>> {
                return new Promise<ReturnType<RequestHandler["channel"]["enableEndToEndEncryption"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"channel", "enableEndToEndEncryption"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["channel"]["enableEndToEndEncryption"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Channel_EnableEndToEndEncryption" as const
                        }
                    };
                    self.#impl.channel.enableEndToEndEncryption({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            closeChannel(context: Omit<RequestContext, "request">): Promise<ReturnType<RequestHandler["channel"]["closeChannel"]>> {
                return new Promise<ReturnType<RequestHandler["channel"]["closeChannel"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"channel", "closeChannel"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["channel"]["closeChannel"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Channel_CloseChannel" as const
                        }
                    };
                    self.#impl.channel.closeChannel({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, );
                })
            },
        };
        this.login = {
            approveOperation(context: Omit<RequestContext, "request">, args: ApproveOperationArgs): Promise<ReturnType<RequestHandler["login"]["approveOperation"]>> {
                return new Promise<ReturnType<RequestHandler["login"]["approveOperation"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"login", "approveOperation"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["login"]["approveOperation"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Login_ApproveOperation" as const
                        }
                    };
                    self.#impl.login.approveOperation({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            closeOpeation(context: Omit<RequestContextWithOperation, "request">): Promise<ReturnType<RequestHandler["login"]["closeOpeation"]>> {
                return new Promise<ReturnType<RequestHandler["login"]["closeOpeation"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"login", "closeOpeation"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["login"]["closeOpeation"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Login_CloseOpeation" as const
                        }
                    };
                    self.#impl.login.closeOpeation({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, );
                })
            },
            getRecordMetadata(context: Omit<RequestContextWithOperation, "request">): Promise<ReturnType<RequestHandler["login"]["getRecordMetadata"]>> {
                return new Promise<ReturnType<RequestHandler["login"]["getRecordMetadata"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"login", "getRecordMetadata"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["login"]["getRecordMetadata"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Login_GetRecordMetadata" as const
                        }
                    };
                    self.#impl.login.getRecordMetadata({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, );
                })
            },
            updateMetadata(context: Omit<RequestContextWithOperation, "request">, args: UpdateMetadataArgs): Promise<ReturnType<RequestHandler["login"]["updateMetadata"]>> {
                return new Promise<ReturnType<RequestHandler["login"]["updateMetadata"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"login", "updateMetadata"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["login"]["updateMetadata"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "Login_UpdateMetadata" as const
                        }
                    };
                    self.#impl.login.updateMetadata({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
        };
        this.accountCreation = {
            approveTransitionToAuthOp(context: Omit<RequestContextWithOperation, "request">, args: ApproveTransitionToAuthOpArgs): Promise<ReturnType<RequestHandler["accountCreation"]["approveTransitionToAuthOp"]>> {
                return new Promise<ReturnType<RequestHandler["accountCreation"]["approveTransitionToAuthOp"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountCreation", "approveTransitionToAuthOp"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountCreation"]["approveTransitionToAuthOp"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountCreation_ApproveTransitionToAuthOp" as const
                        }
                    };
                    self.#impl.accountCreation.approveTransitionToAuthOp({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            getUserAttributes(context: Omit<RequestContextWithOperation, "request">): Promise<ReturnType<RequestHandler["accountCreation"]["getUserAttributes"]>> {
                return new Promise<ReturnType<RequestHandler["accountCreation"]["getUserAttributes"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountCreation", "getUserAttributes"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountCreation"]["getUserAttributes"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountCreation_GetUserAttributes" as const
                        }
                    };
                    self.#impl.accountCreation.getUserAttributes({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, );
                })
            },
            addField(context: Omit<RequestContextWithOperation, "request">, args: AddFieldArgs): Promise<ReturnType<RequestHandler["accountCreation"]["addField"]>> {
                return new Promise<ReturnType<RequestHandler["accountCreation"]["addField"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountCreation", "addField"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountCreation"]["addField"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountCreation_AddField" as const
                        }
                    };
                    self.#impl.accountCreation.addField({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            rejectFieldValue(context: Omit<RequestContextWithOperation, "request">, args: RejectFieldValueArgs): Promise<ReturnType<RequestHandler["accountCreation"]["rejectFieldValue"]>> {
                return new Promise<ReturnType<RequestHandler["accountCreation"]["rejectFieldValue"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountCreation", "rejectFieldValue"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountCreation"]["rejectFieldValue"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountCreation_RejectFieldValue" as const
                        }
                    };
                    self.#impl.accountCreation.rejectFieldValue({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
        };
        this.accountAuthentication = {
            approveChallengeRequest(context: Omit<RequestContextWithOperation, "request">, args: ApproveChallengeRequestArgs): Promise<ReturnType<RequestHandler["accountAuthentication"]["approveChallengeRequest"]>> {
                return new Promise<ReturnType<RequestHandler["accountAuthentication"]["approveChallengeRequest"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountAuthentication", "approveChallengeRequest"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountAuthentication"]["approveChallengeRequest"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountAuthentication_ApproveChallengeRequest" as const
                        }
                    };
                    self.#impl.accountAuthentication.approveChallengeRequest({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            abortChallenge(context: Omit<RequestContextWithOperation, "request">, args: AbortChallengeArgs): Promise<ReturnType<RequestHandler["accountAuthentication"]["abortChallenge"]>> {
                return new Promise<ReturnType<RequestHandler["accountAuthentication"]["abortChallenge"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountAuthentication", "abortChallenge"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountAuthentication"]["abortChallenge"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountAuthentication_AbortChallenge" as const
                        }
                    };
                    self.#impl.accountAuthentication.abortChallenge({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            closeChallenge(context: Omit<RequestContextWithOperation, "request">, args: CloseChallengeArgs): Promise<ReturnType<RequestHandler["accountAuthentication"]["closeChallenge"]>> {
                return new Promise<ReturnType<RequestHandler["accountAuthentication"]["closeChallenge"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountAuthentication", "closeChallenge"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountAuthentication"]["closeChallenge"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountAuthentication_CloseChallenge" as const
                        }
                    };
                    self.#impl.accountAuthentication.closeChallenge({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
            respondToChallengeMessage(context: Omit<RequestContextWithOperation, "request">, args: RespondToChallengeMessageArgs): Promise<ReturnType<RequestHandler["accountAuthentication"]["respondToChallengeMessage"]>> {
                return new Promise<ReturnType<RequestHandler["accountAuthentication"]["respondToChallengeMessage"]>>((_resolve, _reject) => {
                    const responseCtx: ResponseContext<"accountAuthentication", "respondToChallengeMessage"> = {
                        response: {
                            resolve(val: ReturnType<RequestHandler["accountAuthentication"]["respondToChallengeMessage"]>) {
                                _resolve(val);
                            },
                            reject(val: unknown) {
                                _reject(val);
                            }
                        }
                    }
                    const requestCtx = {
                        request: {
                            id: uuid(),
                            type: "AccountAuthentication_RespondToChallengeMessage" as const
                        }
                    };
                    self.#impl.accountAuthentication.respondToChallengeMessage({
                        ...context,
                        ...responseCtx,
                        ...requestCtx
                    }, args);
                })
            },
        };
    }
}